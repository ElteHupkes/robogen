// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robogen.proto

#ifndef PROTOBUF_robogen_2eproto__INCLUDED
#define PROTOBUF_robogen_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace robogenMessage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_robogen_2eproto();
void protobuf_AssignDesc_robogen_2eproto();
void protobuf_ShutdownFile_robogen_2eproto();

class EvolvableParameter;
class BodyPart;
class BodyConnection;
class Body;
class NeuralConnection;
class Neuron;
class Brain;
class Robot;
class Obstacle;
class StartPosition;
class SimulatorConf;
class EvaluationRequest;
class EvaluationResult;

// ===================================================================

class EvolvableParameter : public ::google::protobuf::Message {
 public:
  EvolvableParameter();
  virtual ~EvolvableParameter();

  EvolvableParameter(const EvolvableParameter& from);

  inline EvolvableParameter& operator=(const EvolvableParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvolvableParameter& default_instance();

  void Swap(EvolvableParameter* other);

  // implements Message ----------------------------------------------

  EvolvableParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EvolvableParameter& from);
  void MergeFrom(const EvolvableParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float paramValue = 1;
  inline bool has_paramvalue() const;
  inline void clear_paramvalue();
  static const int kParamValueFieldNumber = 1;
  inline float paramvalue() const;
  inline void set_paramvalue(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.EvolvableParameter)
 private:
  inline void set_has_paramvalue();
  inline void clear_has_paramvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float paramvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static EvolvableParameter* default_instance_;
};
// -------------------------------------------------------------------

class BodyPart : public ::google::protobuf::Message {
 public:
  BodyPart();
  virtual ~BodyPart();

  BodyPart(const BodyPart& from);

  inline BodyPart& operator=(const BodyPart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyPart& default_instance();

  void Swap(BodyPart* other);

  // implements Message ----------------------------------------------

  BodyPart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BodyPart& from);
  void MergeFrom(const BodyPart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required bool root = 3;
  inline bool has_root() const;
  inline void clear_root();
  static const int kRootFieldNumber = 3;
  inline bool root() const;
  inline void set_root(bool value);

  // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
  inline int evolvableparam_size() const;
  inline void clear_evolvableparam();
  static const int kEvolvableParamFieldNumber = 4;
  inline const ::robogenMessage::EvolvableParameter& evolvableparam(int index) const;
  inline ::robogenMessage::EvolvableParameter* mutable_evolvableparam(int index);
  inline ::robogenMessage::EvolvableParameter* add_evolvableparam();
  inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter >&
      evolvableparam() const;
  inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter >*
      mutable_evolvableparam();

  // required int32 orientation = 5;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 5;
  inline ::google::protobuf::int32 orientation() const;
  inline void set_orientation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:robogenMessage.BodyPart)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_root();
  inline void clear_has_root();
  inline void set_has_orientation();
  inline void clear_has_orientation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter > evolvableparam_;
  bool root_;
  ::google::protobuf::int32 orientation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static BodyPart* default_instance_;
};
// -------------------------------------------------------------------

class BodyConnection : public ::google::protobuf::Message {
 public:
  BodyConnection();
  virtual ~BodyConnection();

  BodyConnection(const BodyConnection& from);

  inline BodyConnection& operator=(const BodyConnection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyConnection& default_instance();

  void Swap(BodyConnection* other);

  // implements Message ----------------------------------------------

  BodyConnection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BodyConnection& from);
  void MergeFrom(const BodyConnection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline const ::std::string& dest() const;
  inline void set_dest(const ::std::string& value);
  inline void set_dest(const char* value);
  inline void set_dest(const char* value, size_t size);
  inline ::std::string* mutable_dest();
  inline ::std::string* release_dest();
  inline void set_allocated_dest(::std::string* dest);

  // required int32 srcSlot = 3;
  inline bool has_srcslot() const;
  inline void clear_srcslot();
  static const int kSrcSlotFieldNumber = 3;
  inline ::google::protobuf::int32 srcslot() const;
  inline void set_srcslot(::google::protobuf::int32 value);

  // required int32 destSlot = 4;
  inline bool has_destslot() const;
  inline void clear_destslot();
  static const int kDestSlotFieldNumber = 4;
  inline ::google::protobuf::int32 destslot() const;
  inline void set_destslot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:robogenMessage.BodyConnection)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_srcslot();
  inline void clear_has_srcslot();
  inline void set_has_destslot();
  inline void clear_has_destslot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dest_;
  ::google::protobuf::int32 srcslot_;
  ::google::protobuf::int32 destslot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static BodyConnection* default_instance_;
};
// -------------------------------------------------------------------

class Body : public ::google::protobuf::Message {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Body& default_instance();

  void Swap(Body* other);

  // implements Message ----------------------------------------------

  Body* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .robogenMessage.BodyPart part = 1;
  inline int part_size() const;
  inline void clear_part();
  static const int kPartFieldNumber = 1;
  inline const ::robogenMessage::BodyPart& part(int index) const;
  inline ::robogenMessage::BodyPart* mutable_part(int index);
  inline ::robogenMessage::BodyPart* add_part();
  inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart >&
      part() const;
  inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart >*
      mutable_part();

  // repeated .robogenMessage.BodyConnection connection = 2;
  inline int connection_size() const;
  inline void clear_connection();
  static const int kConnectionFieldNumber = 2;
  inline const ::robogenMessage::BodyConnection& connection(int index) const;
  inline ::robogenMessage::BodyConnection* mutable_connection(int index);
  inline ::robogenMessage::BodyConnection* add_connection();
  inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection >&
      connection() const;
  inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection >*
      mutable_connection();

  // @@protoc_insertion_point(class_scope:robogenMessage.Body)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart > part_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection > connection_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static Body* default_instance_;
};
// -------------------------------------------------------------------

class NeuralConnection : public ::google::protobuf::Message {
 public:
  NeuralConnection();
  virtual ~NeuralConnection();

  NeuralConnection(const NeuralConnection& from);

  inline NeuralConnection& operator=(const NeuralConnection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NeuralConnection& default_instance();

  void Swap(NeuralConnection* other);

  // implements Message ----------------------------------------------

  NeuralConnection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NeuralConnection& from);
  void MergeFrom(const NeuralConnection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline const ::std::string& dest() const;
  inline void set_dest(const ::std::string& value);
  inline void set_dest(const char* value);
  inline void set_dest(const char* value, size_t size);
  inline ::std::string* mutable_dest();
  inline ::std::string* release_dest();
  inline void set_allocated_dest(::std::string* dest);

  // required float weight = 3;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 3;
  inline float weight() const;
  inline void set_weight(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.NeuralConnection)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dest_;
  float weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static NeuralConnection* default_instance_;
};
// -------------------------------------------------------------------

class Neuron : public ::google::protobuf::Message {
 public:
  Neuron();
  virtual ~Neuron();

  Neuron(const Neuron& from);

  inline Neuron& operator=(const Neuron& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Neuron& default_instance();

  void Swap(Neuron* other);

  // implements Message ----------------------------------------------

  Neuron* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Neuron& from);
  void MergeFrom(const Neuron& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float bias = 4;
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 4;
  inline float bias() const;
  inline void set_bias(float value);

  // optional string bodyPartId = 5;
  inline bool has_bodypartid() const;
  inline void clear_bodypartid();
  static const int kBodyPartIdFieldNumber = 5;
  inline const ::std::string& bodypartid() const;
  inline void set_bodypartid(const ::std::string& value);
  inline void set_bodypartid(const char* value);
  inline void set_bodypartid(const char* value, size_t size);
  inline ::std::string* mutable_bodypartid();
  inline ::std::string* release_bodypartid();
  inline void set_allocated_bodypartid(::std::string* bodypartid);

  // optional int32 ioId = 6;
  inline bool has_ioid() const;
  inline void clear_ioid();
  static const int kIoIdFieldNumber = 6;
  inline ::google::protobuf::int32 ioid() const;
  inline void set_ioid(::google::protobuf::int32 value);

  // optional float tau = 7;
  inline bool has_tau() const;
  inline void clear_tau();
  static const int kTauFieldNumber = 7;
  inline float tau() const;
  inline void set_tau(float value);

  // optional float phaseOffset = 8;
  inline bool has_phaseoffset() const;
  inline void clear_phaseoffset();
  static const int kPhaseOffsetFieldNumber = 8;
  inline float phaseoffset() const;
  inline void set_phaseoffset(float value);

  // optional float period = 9;
  inline bool has_period() const;
  inline void clear_period();
  static const int kPeriodFieldNumber = 9;
  inline float period() const;
  inline void set_period(float value);

  // optional float gain = 10;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 10;
  inline float gain() const;
  inline void set_gain(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.Neuron)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_bodypartid();
  inline void clear_has_bodypartid();
  inline void set_has_ioid();
  inline void clear_has_ioid();
  inline void set_has_tau();
  inline void clear_has_tau();
  inline void set_has_phaseoffset();
  inline void clear_has_phaseoffset();
  inline void set_has_period();
  inline void clear_has_period();
  inline void set_has_gain();
  inline void clear_has_gain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* layer_;
  ::std::string* type_;
  ::std::string* bodypartid_;
  float bias_;
  ::google::protobuf::int32 ioid_;
  float tau_;
  float phaseoffset_;
  float period_;
  float gain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static Neuron* default_instance_;
};
// -------------------------------------------------------------------

class Brain : public ::google::protobuf::Message {
 public:
  Brain();
  virtual ~Brain();

  Brain(const Brain& from);

  inline Brain& operator=(const Brain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Brain& default_instance();

  void Swap(Brain* other);

  // implements Message ----------------------------------------------

  Brain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Brain& from);
  void MergeFrom(const Brain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .robogenMessage.Neuron neuron = 1;
  inline int neuron_size() const;
  inline void clear_neuron();
  static const int kNeuronFieldNumber = 1;
  inline const ::robogenMessage::Neuron& neuron(int index) const;
  inline ::robogenMessage::Neuron* mutable_neuron(int index);
  inline ::robogenMessage::Neuron* add_neuron();
  inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron >&
      neuron() const;
  inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron >*
      mutable_neuron();

  // repeated .robogenMessage.NeuralConnection connection = 2;
  inline int connection_size() const;
  inline void clear_connection();
  static const int kConnectionFieldNumber = 2;
  inline const ::robogenMessage::NeuralConnection& connection(int index) const;
  inline ::robogenMessage::NeuralConnection* mutable_connection(int index);
  inline ::robogenMessage::NeuralConnection* add_connection();
  inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection >&
      connection() const;
  inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection >*
      mutable_connection();

  // @@protoc_insertion_point(class_scope:robogenMessage.Brain)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron > neuron_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection > connection_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static Brain* default_instance_;
};
// -------------------------------------------------------------------

class Robot : public ::google::protobuf::Message {
 public:
  Robot();
  virtual ~Robot();

  Robot(const Robot& from);

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot& default_instance();

  void Swap(Robot* other);

  // implements Message ----------------------------------------------

  Robot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .robogenMessage.Body body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::robogenMessage::Body& body() const;
  inline ::robogenMessage::Body* mutable_body();
  inline ::robogenMessage::Body* release_body();
  inline void set_allocated_body(::robogenMessage::Body* body);

  // required .robogenMessage.Brain brain = 3;
  inline bool has_brain() const;
  inline void clear_brain();
  static const int kBrainFieldNumber = 3;
  inline const ::robogenMessage::Brain& brain() const;
  inline ::robogenMessage::Brain* mutable_brain();
  inline ::robogenMessage::Brain* release_brain();
  inline void set_allocated_brain(::robogenMessage::Brain* brain);

  // @@protoc_insertion_point(class_scope:robogenMessage.Robot)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_brain();
  inline void clear_has_brain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::robogenMessage::Body* body_;
  ::robogenMessage::Brain* brain_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static Robot* default_instance_;
};
// -------------------------------------------------------------------

class Obstacle : public ::google::protobuf::Message {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacle& default_instance();

  void Swap(Obstacle* other);

  // implements Message ----------------------------------------------

  Obstacle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // required float xSize = 4;
  inline bool has_xsize() const;
  inline void clear_xsize();
  static const int kXSizeFieldNumber = 4;
  inline float xsize() const;
  inline void set_xsize(float value);

  // required float ySize = 5;
  inline bool has_ysize() const;
  inline void clear_ysize();
  static const int kYSizeFieldNumber = 5;
  inline float ysize() const;
  inline void set_ysize(float value);

  // required float zSize = 6;
  inline bool has_zsize() const;
  inline void clear_zsize();
  static const int kZSizeFieldNumber = 6;
  inline float zsize() const;
  inline void set_zsize(float value);

  // required float density = 7;
  inline bool has_density() const;
  inline void clear_density();
  static const int kDensityFieldNumber = 7;
  inline float density() const;
  inline void set_density(float value);

  // required float xRotation = 8;
  inline bool has_xrotation() const;
  inline void clear_xrotation();
  static const int kXRotationFieldNumber = 8;
  inline float xrotation() const;
  inline void set_xrotation(float value);

  // required float yRotation = 9;
  inline bool has_yrotation() const;
  inline void clear_yrotation();
  static const int kYRotationFieldNumber = 9;
  inline float yrotation() const;
  inline void set_yrotation(float value);

  // required float zRotation = 10;
  inline bool has_zrotation() const;
  inline void clear_zrotation();
  static const int kZRotationFieldNumber = 10;
  inline float zrotation() const;
  inline void set_zrotation(float value);

  // required float rotationAngle = 11;
  inline bool has_rotationangle() const;
  inline void clear_rotationangle();
  static const int kRotationAngleFieldNumber = 11;
  inline float rotationangle() const;
  inline void set_rotationangle(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.Obstacle)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_xsize();
  inline void clear_has_xsize();
  inline void set_has_ysize();
  inline void clear_has_ysize();
  inline void set_has_zsize();
  inline void clear_has_zsize();
  inline void set_has_density();
  inline void clear_has_density();
  inline void set_has_xrotation();
  inline void clear_has_xrotation();
  inline void set_has_yrotation();
  inline void clear_has_yrotation();
  inline void set_has_zrotation();
  inline void clear_has_zrotation();
  inline void set_has_rotationangle();
  inline void clear_has_rotationangle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;
  float xsize_;
  float ysize_;
  float zsize_;
  float density_;
  float xrotation_;
  float yrotation_;
  float zrotation_;
  float rotationangle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static Obstacle* default_instance_;
};
// -------------------------------------------------------------------

class StartPosition : public ::google::protobuf::Message {
 public:
  StartPosition();
  virtual ~StartPosition();

  StartPosition(const StartPosition& from);

  inline StartPosition& operator=(const StartPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartPosition& default_instance();

  void Swap(StartPosition* other);

  // implements Message ----------------------------------------------

  StartPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartPosition& from);
  void MergeFrom(const StartPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float azimuth = 3;
  inline bool has_azimuth() const;
  inline void clear_azimuth();
  static const int kAzimuthFieldNumber = 3;
  inline float azimuth() const;
  inline void set_azimuth(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.StartPosition)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_azimuth();
  inline void clear_has_azimuth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float azimuth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static StartPosition* default_instance_;
};
// -------------------------------------------------------------------

class SimulatorConf : public ::google::protobuf::Message {
 public:
  SimulatorConf();
  virtual ~SimulatorConf();

  SimulatorConf(const SimulatorConf& from);

  inline SimulatorConf& operator=(const SimulatorConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimulatorConf& default_instance();

  void Swap(SimulatorConf* other);

  // implements Message ----------------------------------------------

  SimulatorConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimulatorConf& from);
  void MergeFrom(const SimulatorConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float terrainWidth = 1;
  inline bool has_terrainwidth() const;
  inline void clear_terrainwidth();
  static const int kTerrainWidthFieldNumber = 1;
  inline float terrainwidth() const;
  inline void set_terrainwidth(float value);

  // required float terrainLength = 2;
  inline bool has_terrainlength() const;
  inline void clear_terrainlength();
  static const int kTerrainLengthFieldNumber = 2;
  inline float terrainlength() const;
  inline void set_terrainlength(float value);

  // repeated .robogenMessage.Obstacle obstacles = 3;
  inline int obstacles_size() const;
  inline void clear_obstacles();
  static const int kObstaclesFieldNumber = 3;
  inline const ::robogenMessage::Obstacle& obstacles(int index) const;
  inline ::robogenMessage::Obstacle* mutable_obstacles(int index);
  inline ::robogenMessage::Obstacle* add_obstacles();
  inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle >&
      obstacles() const;
  inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle >*
      mutable_obstacles();

  // required string scenario = 4;
  inline bool has_scenario() const;
  inline void clear_scenario();
  static const int kScenarioFieldNumber = 4;
  inline const ::std::string& scenario() const;
  inline void set_scenario(const ::std::string& value);
  inline void set_scenario(const char* value);
  inline void set_scenario(const char* value, size_t size);
  inline ::std::string* mutable_scenario();
  inline ::std::string* release_scenario();
  inline void set_allocated_scenario(::std::string* scenario);

  // required float lightSourceHeight = 5;
  inline bool has_lightsourceheight() const;
  inline void clear_lightsourceheight();
  static const int kLightSourceHeightFieldNumber = 5;
  inline float lightsourceheight() const;
  inline void set_lightsourceheight(float value);

  // required float timeStep = 6;
  inline bool has_timestep() const;
  inline void clear_timestep();
  static const int kTimeStepFieldNumber = 6;
  inline float timestep() const;
  inline void set_timestep(float value);

  // required int32 nTimeSteps = 7;
  inline bool has_ntimesteps() const;
  inline void clear_ntimesteps();
  static const int kNTimeStepsFieldNumber = 7;
  inline ::google::protobuf::int32 ntimesteps() const;
  inline void set_ntimesteps(::google::protobuf::int32 value);

  // repeated .robogenMessage.StartPosition startPositions = 8;
  inline int startpositions_size() const;
  inline void clear_startpositions();
  static const int kStartPositionsFieldNumber = 8;
  inline const ::robogenMessage::StartPosition& startpositions(int index) const;
  inline ::robogenMessage::StartPosition* mutable_startpositions(int index);
  inline ::robogenMessage::StartPosition* add_startpositions();
  inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition >&
      startpositions() const;
  inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition >*
      mutable_startpositions();

  // required int32 actuationPeriod = 9;
  inline bool has_actuationperiod() const;
  inline void clear_actuationperiod();
  static const int kActuationPeriodFieldNumber = 9;
  inline ::google::protobuf::int32 actuationperiod() const;
  inline void set_actuationperiod(::google::protobuf::int32 value);

  // required float terrainFriction = 10;
  inline bool has_terrainfriction() const;
  inline void clear_terrainfriction();
  static const int kTerrainFrictionFieldNumber = 10;
  inline float terrainfriction() const;
  inline void set_terrainfriction(float value);

  // required float sensorNoiseLevel = 11;
  inline bool has_sensornoiselevel() const;
  inline void clear_sensornoiselevel();
  static const int kSensorNoiseLevelFieldNumber = 11;
  inline float sensornoiselevel() const;
  inline void set_sensornoiselevel(float value);

  // required float motorNoiseLevel = 12;
  inline bool has_motornoiselevel() const;
  inline void clear_motornoiselevel();
  static const int kMotorNoiseLevelFieldNumber = 12;
  inline float motornoiselevel() const;
  inline void set_motornoiselevel(float value);

  // required bool capAcceleration = 13;
  inline bool has_capacceleration() const;
  inline void clear_capacceleration();
  static const int kCapAccelerationFieldNumber = 13;
  inline bool capacceleration() const;
  inline void set_capacceleration(bool value);

  // required float maxLinearAcceleration = 14;
  inline bool has_maxlinearacceleration() const;
  inline void clear_maxlinearacceleration();
  static const int kMaxLinearAccelerationFieldNumber = 14;
  inline float maxlinearacceleration() const;
  inline void set_maxlinearacceleration(float value);

  // required float maxAngularAcceleration = 15;
  inline bool has_maxangularacceleration() const;
  inline void clear_maxangularacceleration();
  static const int kMaxAngularAccelerationFieldNumber = 15;
  inline float maxangularacceleration() const;
  inline void set_maxangularacceleration(float value);

  // required int32 maxDirectionShiftsPerSecond = 16;
  inline bool has_maxdirectionshiftspersecond() const;
  inline void clear_maxdirectionshiftspersecond();
  static const int kMaxDirectionShiftsPerSecondFieldNumber = 16;
  inline ::google::protobuf::int32 maxdirectionshiftspersecond() const;
  inline void set_maxdirectionshiftspersecond(::google::protobuf::int32 value);

  // required float gravityX = 17;
  inline bool has_gravityx() const;
  inline void clear_gravityx();
  static const int kGravityXFieldNumber = 17;
  inline float gravityx() const;
  inline void set_gravityx(float value);

  // required float gravityY = 18;
  inline bool has_gravityy() const;
  inline void clear_gravityy();
  static const int kGravityYFieldNumber = 18;
  inline float gravityy() const;
  inline void set_gravityy(float value);

  // required float gravityZ = 19;
  inline bool has_gravityz() const;
  inline void clear_gravityz();
  static const int kGravityZFieldNumber = 19;
  inline float gravityz() const;
  inline void set_gravityz(float value);

  // required int32 terrainType = 20;
  inline bool has_terraintype() const;
  inline void clear_terraintype();
  static const int kTerrainTypeFieldNumber = 20;
  inline ::google::protobuf::int32 terraintype() const;
  inline void set_terraintype(::google::protobuf::int32 value);

  // required float terrainHeight = 21;
  inline bool has_terrainheight() const;
  inline void clear_terrainheight();
  static const int kTerrainHeightFieldNumber = 21;
  inline float terrainheight() const;
  inline void set_terrainheight(float value);

  // required string terrainHeightFieldFileName = 22;
  inline bool has_terrainheightfieldfilename() const;
  inline void clear_terrainheightfieldfilename();
  static const int kTerrainHeightFieldFileNameFieldNumber = 22;
  inline const ::std::string& terrainheightfieldfilename() const;
  inline void set_terrainheightfieldfilename(const ::std::string& value);
  inline void set_terrainheightfieldfilename(const char* value);
  inline void set_terrainheightfieldfilename(const char* value, size_t size);
  inline ::std::string* mutable_terrainheightfieldfilename();
  inline ::std::string* release_terrainheightfieldfilename();
  inline void set_allocated_terrainheightfieldfilename(::std::string* terrainheightfieldfilename);

  // @@protoc_insertion_point(class_scope:robogenMessage.SimulatorConf)
 private:
  inline void set_has_terrainwidth();
  inline void clear_has_terrainwidth();
  inline void set_has_terrainlength();
  inline void clear_has_terrainlength();
  inline void set_has_scenario();
  inline void clear_has_scenario();
  inline void set_has_lightsourceheight();
  inline void clear_has_lightsourceheight();
  inline void set_has_timestep();
  inline void clear_has_timestep();
  inline void set_has_ntimesteps();
  inline void clear_has_ntimesteps();
  inline void set_has_actuationperiod();
  inline void clear_has_actuationperiod();
  inline void set_has_terrainfriction();
  inline void clear_has_terrainfriction();
  inline void set_has_sensornoiselevel();
  inline void clear_has_sensornoiselevel();
  inline void set_has_motornoiselevel();
  inline void clear_has_motornoiselevel();
  inline void set_has_capacceleration();
  inline void clear_has_capacceleration();
  inline void set_has_maxlinearacceleration();
  inline void clear_has_maxlinearacceleration();
  inline void set_has_maxangularacceleration();
  inline void clear_has_maxangularacceleration();
  inline void set_has_maxdirectionshiftspersecond();
  inline void clear_has_maxdirectionshiftspersecond();
  inline void set_has_gravityx();
  inline void clear_has_gravityx();
  inline void set_has_gravityy();
  inline void clear_has_gravityy();
  inline void set_has_gravityz();
  inline void clear_has_gravityz();
  inline void set_has_terraintype();
  inline void clear_has_terraintype();
  inline void set_has_terrainheight();
  inline void clear_has_terrainheight();
  inline void set_has_terrainheightfieldfilename();
  inline void clear_has_terrainheightfieldfilename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float terrainwidth_;
  float terrainlength_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle > obstacles_;
  ::std::string* scenario_;
  float lightsourceheight_;
  float timestep_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition > startpositions_;
  ::google::protobuf::int32 ntimesteps_;
  ::google::protobuf::int32 actuationperiod_;
  float terrainfriction_;
  float sensornoiselevel_;
  float motornoiselevel_;
  bool capacceleration_;
  float maxlinearacceleration_;
  float maxangularacceleration_;
  ::google::protobuf::int32 maxdirectionshiftspersecond_;
  float gravityx_;
  float gravityy_;
  float gravityz_;
  ::google::protobuf::int32 terraintype_;
  float terrainheight_;
  ::std::string* terrainheightfieldfilename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static SimulatorConf* default_instance_;
};
// -------------------------------------------------------------------

class EvaluationRequest : public ::google::protobuf::Message {
 public:
  EvaluationRequest();
  virtual ~EvaluationRequest();

  EvaluationRequest(const EvaluationRequest& from);

  inline EvaluationRequest& operator=(const EvaluationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvaluationRequest& default_instance();

  void Swap(EvaluationRequest* other);

  // implements Message ----------------------------------------------

  EvaluationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EvaluationRequest& from);
  void MergeFrom(const EvaluationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .robogenMessage.Robot robot = 1;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 1;
  inline const ::robogenMessage::Robot& robot() const;
  inline ::robogenMessage::Robot* mutable_robot();
  inline ::robogenMessage::Robot* release_robot();
  inline void set_allocated_robot(::robogenMessage::Robot* robot);

  // required .robogenMessage.SimulatorConf configuration = 2;
  inline bool has_configuration() const;
  inline void clear_configuration();
  static const int kConfigurationFieldNumber = 2;
  inline const ::robogenMessage::SimulatorConf& configuration() const;
  inline ::robogenMessage::SimulatorConf* mutable_configuration();
  inline ::robogenMessage::SimulatorConf* release_configuration();
  inline void set_allocated_configuration(::robogenMessage::SimulatorConf* configuration);

  // @@protoc_insertion_point(class_scope:robogenMessage.EvaluationRequest)
 private:
  inline void set_has_robot();
  inline void clear_has_robot();
  inline void set_has_configuration();
  inline void clear_has_configuration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::robogenMessage::Robot* robot_;
  ::robogenMessage::SimulatorConf* configuration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static EvaluationRequest* default_instance_;
};
// -------------------------------------------------------------------

class EvaluationResult : public ::google::protobuf::Message {
 public:
  EvaluationResult();
  virtual ~EvaluationResult();

  EvaluationResult(const EvaluationResult& from);

  inline EvaluationResult& operator=(const EvaluationResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvaluationResult& default_instance();

  void Swap(EvaluationResult* other);

  // implements Message ----------------------------------------------

  EvaluationResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EvaluationResult& from);
  void MergeFrom(const EvaluationResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required float fitness = 2;
  inline bool has_fitness() const;
  inline void clear_fitness();
  static const int kFitnessFieldNumber = 2;
  inline float fitness() const;
  inline void set_fitness(float value);

  // repeated float objectives = 3;
  inline int objectives_size() const;
  inline void clear_objectives();
  static const int kObjectivesFieldNumber = 3;
  inline float objectives(int index) const;
  inline void set_objectives(int index, float value);
  inline void add_objectives(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      objectives() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_objectives();

  // @@protoc_insertion_point(class_scope:robogenMessage.EvaluationResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_fitness();
  inline void clear_has_fitness();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  float fitness_;
  ::google::protobuf::RepeatedField< float > objectives_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_robogen_2eproto();
  friend void protobuf_AssignDesc_robogen_2eproto();
  friend void protobuf_ShutdownFile_robogen_2eproto();

  void InitAsDefaultInstance();
  static EvaluationResult* default_instance_;
};
// ===================================================================


// ===================================================================

// EvolvableParameter

// required float paramValue = 1;
inline bool EvolvableParameter::has_paramvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvolvableParameter::set_has_paramvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvolvableParameter::clear_has_paramvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvolvableParameter::clear_paramvalue() {
  paramvalue_ = 0;
  clear_has_paramvalue();
}
inline float EvolvableParameter::paramvalue() const {
  return paramvalue_;
}
inline void EvolvableParameter::set_paramvalue(float value) {
  set_has_paramvalue();
  paramvalue_ = value;
}

// -------------------------------------------------------------------

// BodyPart

// required string id = 1;
inline bool BodyPart::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyPart::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyPart::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyPart::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BodyPart::id() const {
  return *id_;
}
inline void BodyPart::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BodyPart::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BodyPart::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BodyPart::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BodyPart::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BodyPart::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2;
inline bool BodyPart::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BodyPart::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BodyPart::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BodyPart::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& BodyPart::type() const {
  return *type_;
}
inline void BodyPart::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BodyPart::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BodyPart::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BodyPart::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* BodyPart::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BodyPart::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool root = 3;
inline bool BodyPart::has_root() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BodyPart::set_has_root() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BodyPart::clear_has_root() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BodyPart::clear_root() {
  root_ = false;
  clear_has_root();
}
inline bool BodyPart::root() const {
  return root_;
}
inline void BodyPart::set_root(bool value) {
  set_has_root();
  root_ = value;
}

// repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
inline int BodyPart::evolvableparam_size() const {
  return evolvableparam_.size();
}
inline void BodyPart::clear_evolvableparam() {
  evolvableparam_.Clear();
}
inline const ::robogenMessage::EvolvableParameter& BodyPart::evolvableparam(int index) const {
  return evolvableparam_.Get(index);
}
inline ::robogenMessage::EvolvableParameter* BodyPart::mutable_evolvableparam(int index) {
  return evolvableparam_.Mutable(index);
}
inline ::robogenMessage::EvolvableParameter* BodyPart::add_evolvableparam() {
  return evolvableparam_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter >&
BodyPart::evolvableparam() const {
  return evolvableparam_;
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter >*
BodyPart::mutable_evolvableparam() {
  return &evolvableparam_;
}

// required int32 orientation = 5;
inline bool BodyPart::has_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BodyPart::set_has_orientation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BodyPart::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BodyPart::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::google::protobuf::int32 BodyPart::orientation() const {
  return orientation_;
}
inline void BodyPart::set_orientation(::google::protobuf::int32 value) {
  set_has_orientation();
  orientation_ = value;
}

// -------------------------------------------------------------------

// BodyConnection

// required string src = 1;
inline bool BodyConnection::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyConnection::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyConnection::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyConnection::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& BodyConnection::src() const {
  return *src_;
}
inline void BodyConnection::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void BodyConnection::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void BodyConnection::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BodyConnection::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* BodyConnection::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BodyConnection::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dest = 2;
inline bool BodyConnection::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BodyConnection::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BodyConnection::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BodyConnection::clear_dest() {
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    dest_->clear();
  }
  clear_has_dest();
}
inline const ::std::string& BodyConnection::dest() const {
  return *dest_;
}
inline void BodyConnection::set_dest(const ::std::string& value) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(value);
}
inline void BodyConnection::set_dest(const char* value) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(value);
}
inline void BodyConnection::set_dest(const char* value, size_t size) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BodyConnection::mutable_dest() {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  return dest_;
}
inline ::std::string* BodyConnection::release_dest() {
  clear_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dest_;
    dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BodyConnection::set_allocated_dest(::std::string* dest) {
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_;
  }
  if (dest) {
    set_has_dest();
    dest_ = dest;
  } else {
    clear_has_dest();
    dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 srcSlot = 3;
inline bool BodyConnection::has_srcslot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BodyConnection::set_has_srcslot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BodyConnection::clear_has_srcslot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BodyConnection::clear_srcslot() {
  srcslot_ = 0;
  clear_has_srcslot();
}
inline ::google::protobuf::int32 BodyConnection::srcslot() const {
  return srcslot_;
}
inline void BodyConnection::set_srcslot(::google::protobuf::int32 value) {
  set_has_srcslot();
  srcslot_ = value;
}

// required int32 destSlot = 4;
inline bool BodyConnection::has_destslot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BodyConnection::set_has_destslot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BodyConnection::clear_has_destslot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BodyConnection::clear_destslot() {
  destslot_ = 0;
  clear_has_destslot();
}
inline ::google::protobuf::int32 BodyConnection::destslot() const {
  return destslot_;
}
inline void BodyConnection::set_destslot(::google::protobuf::int32 value) {
  set_has_destslot();
  destslot_ = value;
}

// -------------------------------------------------------------------

// Body

// repeated .robogenMessage.BodyPart part = 1;
inline int Body::part_size() const {
  return part_.size();
}
inline void Body::clear_part() {
  part_.Clear();
}
inline const ::robogenMessage::BodyPart& Body::part(int index) const {
  return part_.Get(index);
}
inline ::robogenMessage::BodyPart* Body::mutable_part(int index) {
  return part_.Mutable(index);
}
inline ::robogenMessage::BodyPart* Body::add_part() {
  return part_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart >&
Body::part() const {
  return part_;
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart >*
Body::mutable_part() {
  return &part_;
}

// repeated .robogenMessage.BodyConnection connection = 2;
inline int Body::connection_size() const {
  return connection_.size();
}
inline void Body::clear_connection() {
  connection_.Clear();
}
inline const ::robogenMessage::BodyConnection& Body::connection(int index) const {
  return connection_.Get(index);
}
inline ::robogenMessage::BodyConnection* Body::mutable_connection(int index) {
  return connection_.Mutable(index);
}
inline ::robogenMessage::BodyConnection* Body::add_connection() {
  return connection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection >&
Body::connection() const {
  return connection_;
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection >*
Body::mutable_connection() {
  return &connection_;
}

// -------------------------------------------------------------------

// NeuralConnection

// required string src = 1;
inline bool NeuralConnection::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeuralConnection::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeuralConnection::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeuralConnection::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& NeuralConnection::src() const {
  return *src_;
}
inline void NeuralConnection::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void NeuralConnection::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void NeuralConnection::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NeuralConnection::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* NeuralConnection::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NeuralConnection::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dest = 2;
inline bool NeuralConnection::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeuralConnection::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NeuralConnection::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NeuralConnection::clear_dest() {
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    dest_->clear();
  }
  clear_has_dest();
}
inline const ::std::string& NeuralConnection::dest() const {
  return *dest_;
}
inline void NeuralConnection::set_dest(const ::std::string& value) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(value);
}
inline void NeuralConnection::set_dest(const char* value) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(value);
}
inline void NeuralConnection::set_dest(const char* value, size_t size) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NeuralConnection::mutable_dest() {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  return dest_;
}
inline ::std::string* NeuralConnection::release_dest() {
  clear_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dest_;
    dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NeuralConnection::set_allocated_dest(::std::string* dest) {
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_;
  }
  if (dest) {
    set_has_dest();
    dest_ = dest;
  } else {
    clear_has_dest();
    dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float weight = 3;
inline bool NeuralConnection::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NeuralConnection::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NeuralConnection::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NeuralConnection::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float NeuralConnection::weight() const {
  return weight_;
}
inline void NeuralConnection::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// Neuron

// required string id = 1;
inline bool Neuron::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Neuron::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Neuron::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Neuron::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Neuron::id() const {
  return *id_;
}
inline void Neuron::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Neuron::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Neuron::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Neuron::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Neuron::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Neuron::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string layer = 2;
inline bool Neuron::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Neuron::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Neuron::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Neuron::clear_layer() {
  if (layer_ != &::google::protobuf::internal::kEmptyString) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& Neuron::layer() const {
  return *layer_;
}
inline void Neuron::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
}
inline void Neuron::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
}
inline void Neuron::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Neuron::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    layer_ = new ::std::string;
  }
  return layer_;
}
inline ::std::string* Neuron::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Neuron::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::kEmptyString) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 3;
inline bool Neuron::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Neuron::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Neuron::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Neuron::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Neuron::type() const {
  return *type_;
}
inline void Neuron::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Neuron::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Neuron::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Neuron::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Neuron::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Neuron::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float bias = 4;
inline bool Neuron::has_bias() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Neuron::set_has_bias() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Neuron::clear_has_bias() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Neuron::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float Neuron::bias() const {
  return bias_;
}
inline void Neuron::set_bias(float value) {
  set_has_bias();
  bias_ = value;
}

// optional string bodyPartId = 5;
inline bool Neuron::has_bodypartid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Neuron::set_has_bodypartid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Neuron::clear_has_bodypartid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Neuron::clear_bodypartid() {
  if (bodypartid_ != &::google::protobuf::internal::kEmptyString) {
    bodypartid_->clear();
  }
  clear_has_bodypartid();
}
inline const ::std::string& Neuron::bodypartid() const {
  return *bodypartid_;
}
inline void Neuron::set_bodypartid(const ::std::string& value) {
  set_has_bodypartid();
  if (bodypartid_ == &::google::protobuf::internal::kEmptyString) {
    bodypartid_ = new ::std::string;
  }
  bodypartid_->assign(value);
}
inline void Neuron::set_bodypartid(const char* value) {
  set_has_bodypartid();
  if (bodypartid_ == &::google::protobuf::internal::kEmptyString) {
    bodypartid_ = new ::std::string;
  }
  bodypartid_->assign(value);
}
inline void Neuron::set_bodypartid(const char* value, size_t size) {
  set_has_bodypartid();
  if (bodypartid_ == &::google::protobuf::internal::kEmptyString) {
    bodypartid_ = new ::std::string;
  }
  bodypartid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Neuron::mutable_bodypartid() {
  set_has_bodypartid();
  if (bodypartid_ == &::google::protobuf::internal::kEmptyString) {
    bodypartid_ = new ::std::string;
  }
  return bodypartid_;
}
inline ::std::string* Neuron::release_bodypartid() {
  clear_has_bodypartid();
  if (bodypartid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bodypartid_;
    bodypartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Neuron::set_allocated_bodypartid(::std::string* bodypartid) {
  if (bodypartid_ != &::google::protobuf::internal::kEmptyString) {
    delete bodypartid_;
  }
  if (bodypartid) {
    set_has_bodypartid();
    bodypartid_ = bodypartid;
  } else {
    clear_has_bodypartid();
    bodypartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ioId = 6;
inline bool Neuron::has_ioid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Neuron::set_has_ioid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Neuron::clear_has_ioid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Neuron::clear_ioid() {
  ioid_ = 0;
  clear_has_ioid();
}
inline ::google::protobuf::int32 Neuron::ioid() const {
  return ioid_;
}
inline void Neuron::set_ioid(::google::protobuf::int32 value) {
  set_has_ioid();
  ioid_ = value;
}

// optional float tau = 7;
inline bool Neuron::has_tau() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Neuron::set_has_tau() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Neuron::clear_has_tau() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Neuron::clear_tau() {
  tau_ = 0;
  clear_has_tau();
}
inline float Neuron::tau() const {
  return tau_;
}
inline void Neuron::set_tau(float value) {
  set_has_tau();
  tau_ = value;
}

// optional float phaseOffset = 8;
inline bool Neuron::has_phaseoffset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Neuron::set_has_phaseoffset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Neuron::clear_has_phaseoffset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Neuron::clear_phaseoffset() {
  phaseoffset_ = 0;
  clear_has_phaseoffset();
}
inline float Neuron::phaseoffset() const {
  return phaseoffset_;
}
inline void Neuron::set_phaseoffset(float value) {
  set_has_phaseoffset();
  phaseoffset_ = value;
}

// optional float period = 9;
inline bool Neuron::has_period() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Neuron::set_has_period() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Neuron::clear_has_period() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Neuron::clear_period() {
  period_ = 0;
  clear_has_period();
}
inline float Neuron::period() const {
  return period_;
}
inline void Neuron::set_period(float value) {
  set_has_period();
  period_ = value;
}

// optional float gain = 10;
inline bool Neuron::has_gain() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Neuron::set_has_gain() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Neuron::clear_has_gain() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Neuron::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
inline float Neuron::gain() const {
  return gain_;
}
inline void Neuron::set_gain(float value) {
  set_has_gain();
  gain_ = value;
}

// -------------------------------------------------------------------

// Brain

// repeated .robogenMessage.Neuron neuron = 1;
inline int Brain::neuron_size() const {
  return neuron_.size();
}
inline void Brain::clear_neuron() {
  neuron_.Clear();
}
inline const ::robogenMessage::Neuron& Brain::neuron(int index) const {
  return neuron_.Get(index);
}
inline ::robogenMessage::Neuron* Brain::mutable_neuron(int index) {
  return neuron_.Mutable(index);
}
inline ::robogenMessage::Neuron* Brain::add_neuron() {
  return neuron_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron >&
Brain::neuron() const {
  return neuron_;
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron >*
Brain::mutable_neuron() {
  return &neuron_;
}

// repeated .robogenMessage.NeuralConnection connection = 2;
inline int Brain::connection_size() const {
  return connection_.size();
}
inline void Brain::clear_connection() {
  connection_.Clear();
}
inline const ::robogenMessage::NeuralConnection& Brain::connection(int index) const {
  return connection_.Get(index);
}
inline ::robogenMessage::NeuralConnection* Brain::mutable_connection(int index) {
  return connection_.Mutable(index);
}
inline ::robogenMessage::NeuralConnection* Brain::add_connection() {
  return connection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection >&
Brain::connection() const {
  return connection_;
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection >*
Brain::mutable_connection() {
  return &connection_;
}

// -------------------------------------------------------------------

// Robot

// required int32 id = 1;
inline bool Robot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Robot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Robot::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Robot::id() const {
  return id_;
}
inline void Robot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .robogenMessage.Body body = 2;
inline bool Robot::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robot::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robot::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Robot::clear_body() {
  if (body_ != NULL) body_->::robogenMessage::Body::Clear();
  clear_has_body();
}
inline const ::robogenMessage::Body& Robot::body() const {
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
inline ::robogenMessage::Body* Robot::mutable_body() {
  set_has_body();
  if (body_ == NULL) body_ = new ::robogenMessage::Body;
  return body_;
}
inline ::robogenMessage::Body* Robot::release_body() {
  clear_has_body();
  ::robogenMessage::Body* temp = body_;
  body_ = NULL;
  return temp;
}
inline void Robot::set_allocated_body(::robogenMessage::Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
}

// required .robogenMessage.Brain brain = 3;
inline bool Robot::has_brain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Robot::set_has_brain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Robot::clear_has_brain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Robot::clear_brain() {
  if (brain_ != NULL) brain_->::robogenMessage::Brain::Clear();
  clear_has_brain();
}
inline const ::robogenMessage::Brain& Robot::brain() const {
  return brain_ != NULL ? *brain_ : *default_instance_->brain_;
}
inline ::robogenMessage::Brain* Robot::mutable_brain() {
  set_has_brain();
  if (brain_ == NULL) brain_ = new ::robogenMessage::Brain;
  return brain_;
}
inline ::robogenMessage::Brain* Robot::release_brain() {
  clear_has_brain();
  ::robogenMessage::Brain* temp = brain_;
  brain_ = NULL;
  return temp;
}
inline void Robot::set_allocated_brain(::robogenMessage::Brain* brain) {
  delete brain_;
  brain_ = brain;
  if (brain) {
    set_has_brain();
  } else {
    clear_has_brain();
  }
}

// -------------------------------------------------------------------

// Obstacle

// required float x = 1;
inline bool Obstacle::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacle::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Obstacle::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Obstacle::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Obstacle::x() const {
  return x_;
}
inline void Obstacle::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Obstacle::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacle::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Obstacle::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Obstacle::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Obstacle::y() const {
  return y_;
}
inline void Obstacle::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool Obstacle::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacle::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Obstacle::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Obstacle::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Obstacle::z() const {
  return z_;
}
inline void Obstacle::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required float xSize = 4;
inline bool Obstacle::has_xsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Obstacle::set_has_xsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Obstacle::clear_has_xsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Obstacle::clear_xsize() {
  xsize_ = 0;
  clear_has_xsize();
}
inline float Obstacle::xsize() const {
  return xsize_;
}
inline void Obstacle::set_xsize(float value) {
  set_has_xsize();
  xsize_ = value;
}

// required float ySize = 5;
inline bool Obstacle::has_ysize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Obstacle::set_has_ysize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Obstacle::clear_has_ysize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Obstacle::clear_ysize() {
  ysize_ = 0;
  clear_has_ysize();
}
inline float Obstacle::ysize() const {
  return ysize_;
}
inline void Obstacle::set_ysize(float value) {
  set_has_ysize();
  ysize_ = value;
}

// required float zSize = 6;
inline bool Obstacle::has_zsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Obstacle::set_has_zsize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Obstacle::clear_has_zsize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Obstacle::clear_zsize() {
  zsize_ = 0;
  clear_has_zsize();
}
inline float Obstacle::zsize() const {
  return zsize_;
}
inline void Obstacle::set_zsize(float value) {
  set_has_zsize();
  zsize_ = value;
}

// required float density = 7;
inline bool Obstacle::has_density() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Obstacle::set_has_density() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Obstacle::clear_has_density() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Obstacle::clear_density() {
  density_ = 0;
  clear_has_density();
}
inline float Obstacle::density() const {
  return density_;
}
inline void Obstacle::set_density(float value) {
  set_has_density();
  density_ = value;
}

// required float xRotation = 8;
inline bool Obstacle::has_xrotation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Obstacle::set_has_xrotation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Obstacle::clear_has_xrotation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Obstacle::clear_xrotation() {
  xrotation_ = 0;
  clear_has_xrotation();
}
inline float Obstacle::xrotation() const {
  return xrotation_;
}
inline void Obstacle::set_xrotation(float value) {
  set_has_xrotation();
  xrotation_ = value;
}

// required float yRotation = 9;
inline bool Obstacle::has_yrotation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Obstacle::set_has_yrotation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Obstacle::clear_has_yrotation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Obstacle::clear_yrotation() {
  yrotation_ = 0;
  clear_has_yrotation();
}
inline float Obstacle::yrotation() const {
  return yrotation_;
}
inline void Obstacle::set_yrotation(float value) {
  set_has_yrotation();
  yrotation_ = value;
}

// required float zRotation = 10;
inline bool Obstacle::has_zrotation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Obstacle::set_has_zrotation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Obstacle::clear_has_zrotation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Obstacle::clear_zrotation() {
  zrotation_ = 0;
  clear_has_zrotation();
}
inline float Obstacle::zrotation() const {
  return zrotation_;
}
inline void Obstacle::set_zrotation(float value) {
  set_has_zrotation();
  zrotation_ = value;
}

// required float rotationAngle = 11;
inline bool Obstacle::has_rotationangle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Obstacle::set_has_rotationangle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Obstacle::clear_has_rotationangle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Obstacle::clear_rotationangle() {
  rotationangle_ = 0;
  clear_has_rotationangle();
}
inline float Obstacle::rotationangle() const {
  return rotationangle_;
}
inline void Obstacle::set_rotationangle(float value) {
  set_has_rotationangle();
  rotationangle_ = value;
}

// -------------------------------------------------------------------

// StartPosition

// required float x = 1;
inline bool StartPosition::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartPosition::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartPosition::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartPosition::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float StartPosition::x() const {
  return x_;
}
inline void StartPosition::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool StartPosition::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartPosition::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartPosition::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartPosition::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float StartPosition::y() const {
  return y_;
}
inline void StartPosition::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float azimuth = 3;
inline bool StartPosition::has_azimuth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StartPosition::set_has_azimuth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StartPosition::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StartPosition::clear_azimuth() {
  azimuth_ = 0;
  clear_has_azimuth();
}
inline float StartPosition::azimuth() const {
  return azimuth_;
}
inline void StartPosition::set_azimuth(float value) {
  set_has_azimuth();
  azimuth_ = value;
}

// -------------------------------------------------------------------

// SimulatorConf

// required float terrainWidth = 1;
inline bool SimulatorConf::has_terrainwidth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimulatorConf::set_has_terrainwidth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimulatorConf::clear_has_terrainwidth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimulatorConf::clear_terrainwidth() {
  terrainwidth_ = 0;
  clear_has_terrainwidth();
}
inline float SimulatorConf::terrainwidth() const {
  return terrainwidth_;
}
inline void SimulatorConf::set_terrainwidth(float value) {
  set_has_terrainwidth();
  terrainwidth_ = value;
}

// required float terrainLength = 2;
inline bool SimulatorConf::has_terrainlength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimulatorConf::set_has_terrainlength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimulatorConf::clear_has_terrainlength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimulatorConf::clear_terrainlength() {
  terrainlength_ = 0;
  clear_has_terrainlength();
}
inline float SimulatorConf::terrainlength() const {
  return terrainlength_;
}
inline void SimulatorConf::set_terrainlength(float value) {
  set_has_terrainlength();
  terrainlength_ = value;
}

// repeated .robogenMessage.Obstacle obstacles = 3;
inline int SimulatorConf::obstacles_size() const {
  return obstacles_.size();
}
inline void SimulatorConf::clear_obstacles() {
  obstacles_.Clear();
}
inline const ::robogenMessage::Obstacle& SimulatorConf::obstacles(int index) const {
  return obstacles_.Get(index);
}
inline ::robogenMessage::Obstacle* SimulatorConf::mutable_obstacles(int index) {
  return obstacles_.Mutable(index);
}
inline ::robogenMessage::Obstacle* SimulatorConf::add_obstacles() {
  return obstacles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle >&
SimulatorConf::obstacles() const {
  return obstacles_;
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle >*
SimulatorConf::mutable_obstacles() {
  return &obstacles_;
}

// required string scenario = 4;
inline bool SimulatorConf::has_scenario() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimulatorConf::set_has_scenario() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimulatorConf::clear_has_scenario() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimulatorConf::clear_scenario() {
  if (scenario_ != &::google::protobuf::internal::kEmptyString) {
    scenario_->clear();
  }
  clear_has_scenario();
}
inline const ::std::string& SimulatorConf::scenario() const {
  return *scenario_;
}
inline void SimulatorConf::set_scenario(const ::std::string& value) {
  set_has_scenario();
  if (scenario_ == &::google::protobuf::internal::kEmptyString) {
    scenario_ = new ::std::string;
  }
  scenario_->assign(value);
}
inline void SimulatorConf::set_scenario(const char* value) {
  set_has_scenario();
  if (scenario_ == &::google::protobuf::internal::kEmptyString) {
    scenario_ = new ::std::string;
  }
  scenario_->assign(value);
}
inline void SimulatorConf::set_scenario(const char* value, size_t size) {
  set_has_scenario();
  if (scenario_ == &::google::protobuf::internal::kEmptyString) {
    scenario_ = new ::std::string;
  }
  scenario_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimulatorConf::mutable_scenario() {
  set_has_scenario();
  if (scenario_ == &::google::protobuf::internal::kEmptyString) {
    scenario_ = new ::std::string;
  }
  return scenario_;
}
inline ::std::string* SimulatorConf::release_scenario() {
  clear_has_scenario();
  if (scenario_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scenario_;
    scenario_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SimulatorConf::set_allocated_scenario(::std::string* scenario) {
  if (scenario_ != &::google::protobuf::internal::kEmptyString) {
    delete scenario_;
  }
  if (scenario) {
    set_has_scenario();
    scenario_ = scenario;
  } else {
    clear_has_scenario();
    scenario_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float lightSourceHeight = 5;
inline bool SimulatorConf::has_lightsourceheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimulatorConf::set_has_lightsourceheight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SimulatorConf::clear_has_lightsourceheight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SimulatorConf::clear_lightsourceheight() {
  lightsourceheight_ = 0;
  clear_has_lightsourceheight();
}
inline float SimulatorConf::lightsourceheight() const {
  return lightsourceheight_;
}
inline void SimulatorConf::set_lightsourceheight(float value) {
  set_has_lightsourceheight();
  lightsourceheight_ = value;
}

// required float timeStep = 6;
inline bool SimulatorConf::has_timestep() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimulatorConf::set_has_timestep() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SimulatorConf::clear_has_timestep() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SimulatorConf::clear_timestep() {
  timestep_ = 0;
  clear_has_timestep();
}
inline float SimulatorConf::timestep() const {
  return timestep_;
}
inline void SimulatorConf::set_timestep(float value) {
  set_has_timestep();
  timestep_ = value;
}

// required int32 nTimeSteps = 7;
inline bool SimulatorConf::has_ntimesteps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SimulatorConf::set_has_ntimesteps() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SimulatorConf::clear_has_ntimesteps() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SimulatorConf::clear_ntimesteps() {
  ntimesteps_ = 0;
  clear_has_ntimesteps();
}
inline ::google::protobuf::int32 SimulatorConf::ntimesteps() const {
  return ntimesteps_;
}
inline void SimulatorConf::set_ntimesteps(::google::protobuf::int32 value) {
  set_has_ntimesteps();
  ntimesteps_ = value;
}

// repeated .robogenMessage.StartPosition startPositions = 8;
inline int SimulatorConf::startpositions_size() const {
  return startpositions_.size();
}
inline void SimulatorConf::clear_startpositions() {
  startpositions_.Clear();
}
inline const ::robogenMessage::StartPosition& SimulatorConf::startpositions(int index) const {
  return startpositions_.Get(index);
}
inline ::robogenMessage::StartPosition* SimulatorConf::mutable_startpositions(int index) {
  return startpositions_.Mutable(index);
}
inline ::robogenMessage::StartPosition* SimulatorConf::add_startpositions() {
  return startpositions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition >&
SimulatorConf::startpositions() const {
  return startpositions_;
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition >*
SimulatorConf::mutable_startpositions() {
  return &startpositions_;
}

// required int32 actuationPeriod = 9;
inline bool SimulatorConf::has_actuationperiod() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SimulatorConf::set_has_actuationperiod() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SimulatorConf::clear_has_actuationperiod() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SimulatorConf::clear_actuationperiod() {
  actuationperiod_ = 0;
  clear_has_actuationperiod();
}
inline ::google::protobuf::int32 SimulatorConf::actuationperiod() const {
  return actuationperiod_;
}
inline void SimulatorConf::set_actuationperiod(::google::protobuf::int32 value) {
  set_has_actuationperiod();
  actuationperiod_ = value;
}

// required float terrainFriction = 10;
inline bool SimulatorConf::has_terrainfriction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SimulatorConf::set_has_terrainfriction() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SimulatorConf::clear_has_terrainfriction() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SimulatorConf::clear_terrainfriction() {
  terrainfriction_ = 0;
  clear_has_terrainfriction();
}
inline float SimulatorConf::terrainfriction() const {
  return terrainfriction_;
}
inline void SimulatorConf::set_terrainfriction(float value) {
  set_has_terrainfriction();
  terrainfriction_ = value;
}

// required float sensorNoiseLevel = 11;
inline bool SimulatorConf::has_sensornoiselevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SimulatorConf::set_has_sensornoiselevel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SimulatorConf::clear_has_sensornoiselevel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SimulatorConf::clear_sensornoiselevel() {
  sensornoiselevel_ = 0;
  clear_has_sensornoiselevel();
}
inline float SimulatorConf::sensornoiselevel() const {
  return sensornoiselevel_;
}
inline void SimulatorConf::set_sensornoiselevel(float value) {
  set_has_sensornoiselevel();
  sensornoiselevel_ = value;
}

// required float motorNoiseLevel = 12;
inline bool SimulatorConf::has_motornoiselevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SimulatorConf::set_has_motornoiselevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SimulatorConf::clear_has_motornoiselevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SimulatorConf::clear_motornoiselevel() {
  motornoiselevel_ = 0;
  clear_has_motornoiselevel();
}
inline float SimulatorConf::motornoiselevel() const {
  return motornoiselevel_;
}
inline void SimulatorConf::set_motornoiselevel(float value) {
  set_has_motornoiselevel();
  motornoiselevel_ = value;
}

// required bool capAcceleration = 13;
inline bool SimulatorConf::has_capacceleration() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SimulatorConf::set_has_capacceleration() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SimulatorConf::clear_has_capacceleration() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SimulatorConf::clear_capacceleration() {
  capacceleration_ = false;
  clear_has_capacceleration();
}
inline bool SimulatorConf::capacceleration() const {
  return capacceleration_;
}
inline void SimulatorConf::set_capacceleration(bool value) {
  set_has_capacceleration();
  capacceleration_ = value;
}

// required float maxLinearAcceleration = 14;
inline bool SimulatorConf::has_maxlinearacceleration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SimulatorConf::set_has_maxlinearacceleration() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SimulatorConf::clear_has_maxlinearacceleration() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SimulatorConf::clear_maxlinearacceleration() {
  maxlinearacceleration_ = 0;
  clear_has_maxlinearacceleration();
}
inline float SimulatorConf::maxlinearacceleration() const {
  return maxlinearacceleration_;
}
inline void SimulatorConf::set_maxlinearacceleration(float value) {
  set_has_maxlinearacceleration();
  maxlinearacceleration_ = value;
}

// required float maxAngularAcceleration = 15;
inline bool SimulatorConf::has_maxangularacceleration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SimulatorConf::set_has_maxangularacceleration() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SimulatorConf::clear_has_maxangularacceleration() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SimulatorConf::clear_maxangularacceleration() {
  maxangularacceleration_ = 0;
  clear_has_maxangularacceleration();
}
inline float SimulatorConf::maxangularacceleration() const {
  return maxangularacceleration_;
}
inline void SimulatorConf::set_maxangularacceleration(float value) {
  set_has_maxangularacceleration();
  maxangularacceleration_ = value;
}

// required int32 maxDirectionShiftsPerSecond = 16;
inline bool SimulatorConf::has_maxdirectionshiftspersecond() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SimulatorConf::set_has_maxdirectionshiftspersecond() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SimulatorConf::clear_has_maxdirectionshiftspersecond() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SimulatorConf::clear_maxdirectionshiftspersecond() {
  maxdirectionshiftspersecond_ = 0;
  clear_has_maxdirectionshiftspersecond();
}
inline ::google::protobuf::int32 SimulatorConf::maxdirectionshiftspersecond() const {
  return maxdirectionshiftspersecond_;
}
inline void SimulatorConf::set_maxdirectionshiftspersecond(::google::protobuf::int32 value) {
  set_has_maxdirectionshiftspersecond();
  maxdirectionshiftspersecond_ = value;
}

// required float gravityX = 17;
inline bool SimulatorConf::has_gravityx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SimulatorConf::set_has_gravityx() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SimulatorConf::clear_has_gravityx() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SimulatorConf::clear_gravityx() {
  gravityx_ = 0;
  clear_has_gravityx();
}
inline float SimulatorConf::gravityx() const {
  return gravityx_;
}
inline void SimulatorConf::set_gravityx(float value) {
  set_has_gravityx();
  gravityx_ = value;
}

// required float gravityY = 18;
inline bool SimulatorConf::has_gravityy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SimulatorConf::set_has_gravityy() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SimulatorConf::clear_has_gravityy() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SimulatorConf::clear_gravityy() {
  gravityy_ = 0;
  clear_has_gravityy();
}
inline float SimulatorConf::gravityy() const {
  return gravityy_;
}
inline void SimulatorConf::set_gravityy(float value) {
  set_has_gravityy();
  gravityy_ = value;
}

// required float gravityZ = 19;
inline bool SimulatorConf::has_gravityz() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SimulatorConf::set_has_gravityz() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SimulatorConf::clear_has_gravityz() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SimulatorConf::clear_gravityz() {
  gravityz_ = 0;
  clear_has_gravityz();
}
inline float SimulatorConf::gravityz() const {
  return gravityz_;
}
inline void SimulatorConf::set_gravityz(float value) {
  set_has_gravityz();
  gravityz_ = value;
}

// required int32 terrainType = 20;
inline bool SimulatorConf::has_terraintype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SimulatorConf::set_has_terraintype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SimulatorConf::clear_has_terraintype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SimulatorConf::clear_terraintype() {
  terraintype_ = 0;
  clear_has_terraintype();
}
inline ::google::protobuf::int32 SimulatorConf::terraintype() const {
  return terraintype_;
}
inline void SimulatorConf::set_terraintype(::google::protobuf::int32 value) {
  set_has_terraintype();
  terraintype_ = value;
}

// required float terrainHeight = 21;
inline bool SimulatorConf::has_terrainheight() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SimulatorConf::set_has_terrainheight() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SimulatorConf::clear_has_terrainheight() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SimulatorConf::clear_terrainheight() {
  terrainheight_ = 0;
  clear_has_terrainheight();
}
inline float SimulatorConf::terrainheight() const {
  return terrainheight_;
}
inline void SimulatorConf::set_terrainheight(float value) {
  set_has_terrainheight();
  terrainheight_ = value;
}

// required string terrainHeightFieldFileName = 22;
inline bool SimulatorConf::has_terrainheightfieldfilename() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SimulatorConf::set_has_terrainheightfieldfilename() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SimulatorConf::clear_has_terrainheightfieldfilename() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SimulatorConf::clear_terrainheightfieldfilename() {
  if (terrainheightfieldfilename_ != &::google::protobuf::internal::kEmptyString) {
    terrainheightfieldfilename_->clear();
  }
  clear_has_terrainheightfieldfilename();
}
inline const ::std::string& SimulatorConf::terrainheightfieldfilename() const {
  return *terrainheightfieldfilename_;
}
inline void SimulatorConf::set_terrainheightfieldfilename(const ::std::string& value) {
  set_has_terrainheightfieldfilename();
  if (terrainheightfieldfilename_ == &::google::protobuf::internal::kEmptyString) {
    terrainheightfieldfilename_ = new ::std::string;
  }
  terrainheightfieldfilename_->assign(value);
}
inline void SimulatorConf::set_terrainheightfieldfilename(const char* value) {
  set_has_terrainheightfieldfilename();
  if (terrainheightfieldfilename_ == &::google::protobuf::internal::kEmptyString) {
    terrainheightfieldfilename_ = new ::std::string;
  }
  terrainheightfieldfilename_->assign(value);
}
inline void SimulatorConf::set_terrainheightfieldfilename(const char* value, size_t size) {
  set_has_terrainheightfieldfilename();
  if (terrainheightfieldfilename_ == &::google::protobuf::internal::kEmptyString) {
    terrainheightfieldfilename_ = new ::std::string;
  }
  terrainheightfieldfilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimulatorConf::mutable_terrainheightfieldfilename() {
  set_has_terrainheightfieldfilename();
  if (terrainheightfieldfilename_ == &::google::protobuf::internal::kEmptyString) {
    terrainheightfieldfilename_ = new ::std::string;
  }
  return terrainheightfieldfilename_;
}
inline ::std::string* SimulatorConf::release_terrainheightfieldfilename() {
  clear_has_terrainheightfieldfilename();
  if (terrainheightfieldfilename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = terrainheightfieldfilename_;
    terrainheightfieldfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SimulatorConf::set_allocated_terrainheightfieldfilename(::std::string* terrainheightfieldfilename) {
  if (terrainheightfieldfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete terrainheightfieldfilename_;
  }
  if (terrainheightfieldfilename) {
    set_has_terrainheightfieldfilename();
    terrainheightfieldfilename_ = terrainheightfieldfilename;
  } else {
    clear_has_terrainheightfieldfilename();
    terrainheightfieldfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EvaluationRequest

// required .robogenMessage.Robot robot = 1;
inline bool EvaluationRequest::has_robot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvaluationRequest::set_has_robot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvaluationRequest::clear_has_robot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvaluationRequest::clear_robot() {
  if (robot_ != NULL) robot_->::robogenMessage::Robot::Clear();
  clear_has_robot();
}
inline const ::robogenMessage::Robot& EvaluationRequest::robot() const {
  return robot_ != NULL ? *robot_ : *default_instance_->robot_;
}
inline ::robogenMessage::Robot* EvaluationRequest::mutable_robot() {
  set_has_robot();
  if (robot_ == NULL) robot_ = new ::robogenMessage::Robot;
  return robot_;
}
inline ::robogenMessage::Robot* EvaluationRequest::release_robot() {
  clear_has_robot();
  ::robogenMessage::Robot* temp = robot_;
  robot_ = NULL;
  return temp;
}
inline void EvaluationRequest::set_allocated_robot(::robogenMessage::Robot* robot) {
  delete robot_;
  robot_ = robot;
  if (robot) {
    set_has_robot();
  } else {
    clear_has_robot();
  }
}

// required .robogenMessage.SimulatorConf configuration = 2;
inline bool EvaluationRequest::has_configuration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EvaluationRequest::set_has_configuration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EvaluationRequest::clear_has_configuration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EvaluationRequest::clear_configuration() {
  if (configuration_ != NULL) configuration_->::robogenMessage::SimulatorConf::Clear();
  clear_has_configuration();
}
inline const ::robogenMessage::SimulatorConf& EvaluationRequest::configuration() const {
  return configuration_ != NULL ? *configuration_ : *default_instance_->configuration_;
}
inline ::robogenMessage::SimulatorConf* EvaluationRequest::mutable_configuration() {
  set_has_configuration();
  if (configuration_ == NULL) configuration_ = new ::robogenMessage::SimulatorConf;
  return configuration_;
}
inline ::robogenMessage::SimulatorConf* EvaluationRequest::release_configuration() {
  clear_has_configuration();
  ::robogenMessage::SimulatorConf* temp = configuration_;
  configuration_ = NULL;
  return temp;
}
inline void EvaluationRequest::set_allocated_configuration(::robogenMessage::SimulatorConf* configuration) {
  delete configuration_;
  configuration_ = configuration;
  if (configuration) {
    set_has_configuration();
  } else {
    clear_has_configuration();
  }
}

// -------------------------------------------------------------------

// EvaluationResult

// required int32 id = 1;
inline bool EvaluationResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvaluationResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvaluationResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvaluationResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EvaluationResult::id() const {
  return id_;
}
inline void EvaluationResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required float fitness = 2;
inline bool EvaluationResult::has_fitness() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EvaluationResult::set_has_fitness() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EvaluationResult::clear_has_fitness() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EvaluationResult::clear_fitness() {
  fitness_ = 0;
  clear_has_fitness();
}
inline float EvaluationResult::fitness() const {
  return fitness_;
}
inline void EvaluationResult::set_fitness(float value) {
  set_has_fitness();
  fitness_ = value;
}

// repeated float objectives = 3;
inline int EvaluationResult::objectives_size() const {
  return objectives_.size();
}
inline void EvaluationResult::clear_objectives() {
  objectives_.Clear();
}
inline float EvaluationResult::objectives(int index) const {
  return objectives_.Get(index);
}
inline void EvaluationResult::set_objectives(int index, float value) {
  objectives_.Set(index, value);
}
inline void EvaluationResult::add_objectives(float value) {
  objectives_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
EvaluationResult::objectives() const {
  return objectives_;
}
inline ::google::protobuf::RepeatedField< float >*
EvaluationResult::mutable_objectives() {
  return &objectives_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace robogenMessage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_robogen_2eproto__INCLUDED
